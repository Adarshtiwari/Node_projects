service: food-delivery-app

Parameters:
  LambdaPrefix:
    Description: Prefix for Lambda functions
    Type: String
    Default: fd

provider:
  name: aws
  stage: dev
  tracing: true # enable tracing
  versionFunctions: false
  runtime: nodejs14.x
  environment: ${self:custom.envsettings.${self:custom.myStage}}
  # deploymentBucket:
  #   name: ${self:custom.settings.${self:custom.myStage}.sharedBucketName}

configValidationMode: off
# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

plugins:
  - serverless-plugin-tracing
  - serverless-appsync-plugin
  - serverless-plugin-existing-s3
  # - serverless-step-functions
package:
  # individually: true
  exclude:
    - node_modules/**
    - target/**
    - mapping-templates/**
    - schema/**
    - deploy**
    - README**
    - config/**
    # - package**
    - events/**

# custom:
#     webpack:
#         webpackConfig: ./webpack.config.js
#         includeModules: false

functions:
  RestaurantResolver:
    handler: services/graphQLresolvers/restaurant-resolver.restaurantResolverHandler
    name: fd_resolver_restaurantHandler # optional, Deployed Lambda name
    description: "Restaurant AppSync Resolver"
    role: lambdaExecutionRole
    memorySize: 512 # optional, in MB, default is 1024
    layers:
      - "arn:aws:lambda:us-east-1:706227643616:layer:dynamo-db-layers:4"
    # events:
    #   - httpApi: 'POST /concept'
    #   - httpApi: 'GET /concept'

  UserResolver:
    handler: services/graphQLresolvers/user-resolver.userResolverHandler
    name: fd_resolver_userHandler # optional, Deployed Lambda name
    description: "Restaurant AppSync Resolver"
    role: lambdaExecutionRole
    memorySize: 512 # optional, in MB, default is 1024
    layers:
      - "arn:aws:lambda:us-east-1:706227643616:layer:dynamo-db-layers:4"

  CartResolver:
    handler: services/graphQLresolvers/cart-resolver.cartResolverHandler
    name: fd_resolver_cartHandler # optional, Deployed Lambda name
    description: "Cart AppSync Resolver"
    role: lambdaExecutionRole
    memorySize: 512 # optional, in MB, default is 1024
    layers:
      - "arn:aws:lambda:us-east-1:706227643616:layer:dynamo-db-layers:4"

  OrderResolver:
    handler: services/graphQLresolvers/order-resolver.orderResolverHandler
    name: fd_resolver_orderHandler # optional, Deployed Lambda name
    description: "order AppSync Resolver"
    role: lambdaExecutionRole
    memorySize: 512 # optional, in MB, default is 1024
    layers:
      - "arn:aws:lambda:us-east-1:706227643616:layer:dynamo-db-layers:4"

  DeliveryResolver:
    handler: services/graphQLresolvers/delivery-resolver.deliveryResolverHandler
    name: fd_resolver_deliveryHandler # optional, Deployed Lambda name
    description: "Delivery AppSync Resolver"
    role: lambdaExecutionRole
    memorySize: 512 # optional, in MB, default is 1024
    layers:
      - "arn:aws:lambda:us-east-1:706227643616:layer:dynamo-db-layers:4"

  BillingResolver:
    handler: services/graphQLresolvers/billing-resolver.BillingResolverHandler
    name: fd_resolver_billingHandler # optional, Deployed Lambda name
    description: "Billing AppSync Resolver"
    role: lambdaExecutionRole
    memorySize: 512 # optional, in MB, default is 1024
    layers:
      - "arn:aws:lambda:us-east-1:706227643616:layer:dynamo-db-layers:4"

custom:
  myStage: ${opt:stage, self:provider.stage}
  conregion: ${opt:region, self:provider.region}
  envsettings:
    dev:
      PREFIX: fd
      STAGE: dev
      LAMBDAREGION: "us-east-1"
      REGION: ${opt:region, self:provider.region}
      NODE_PATH: "./:/opt/node_modules"
      restauranttable: fd_restaurant-dev

    tst:
      PREFIX: fd
      STAGE: tst
      REGION: ${opt:region, self:provider.region}
      NODE_PATH: "./:/opt/node_modules"

  settings:
    dev:
      userPoolId: us-east-1_tppSnTUFa
      region: us-east-1
      sharedBucketName: food-delivery-app-bucket
      us-east-1:
        globalLayer: "arn:aws:lambda:us-east-1:706227643616:layer:dynamo-db-layers:4"
      # menustream: 'arn:aws:dynamodb:eu-west-1:214006439839:table/cg_cm_table_menu/stream/2020-06-19T15:17:19.840'
      # recipestream: 'arn:aws:dynamodb:eu-west-1:214006439839:table/cg_cm_table_Recipe/stream/2020-06-19T15:06:12.190'
    tst:

  #  Appsync changes
  appSync:
    name: fd_appsync_api-${opt:stage}
    xrayEnabled: true
    authenticationType: API_KEY
    mappingTemplates:
      # Restaurant Mapping
      - dataSource: fd_lambdaresolver_restaurantHandler
        type: Mutation
        field: createRestaurant
        request: "restaurant/mutation/createRestaurant/request.vtl"
        response: "restaurant/mutation/createRestaurant/response.vtl"

      - dataSource: fd_lambdaresolver_restaurantHandler
        type: Query
        field: getRestaurantDetails
        request: "restaurant/query/getRestaurant/request.vtl"
        response: "restaurant/query/getRestaurant/response.vtl"

      - dataSource: fd_lambdaresolver_restaurantHandler
        type: Query
        field: getRestaurantByUserId
        request: "restaurant/query/getRestaurantByUserId/request.vtl"
        response: "restaurant/query/getRestaurantByUserId/response.vtl"

      - dataSource: fd_lambdaresolver_restaurantHandler
        type: Query
        field: filterQuerryOnRestaurant
        request: "restaurant/query/filterQuerryOnRestaurant/request.vtl"
        response: "restaurant/query/filterQuerryOnRestaurant/response.vtl"

      - dataSource: fd_lambdaresolver_restaurantHandler
        type: Query
        field: filterQuerry
        request: "restaurant/query/filterQuerry/request.vtl"
        response: "restaurant/query/filterQuerry/response.vtl"

      - dataSource: fd_lambdaresolver_restaurantHandler
        type: Mutation
        field: createMenuItem
        request: "restaurant/mutation/createMenuItem/request.vtl"
        response: "restaurant/mutation/createMenuItem/response.vtl"

      - dataSource: fd_lambdaresolver_restaurantHandler
        type: Query
        field: getMenuItemsByRestaurantId
        request: "restaurant/query/getMenuItems/request.vtl"
        response: "restaurant/query/getMenuItems/response.vtl"

      - dataSource: fd_lambdaresolver_orderHandler
        type: Query
        field: getDeliveryDetailsByUserId
        request: "delivery/query/getDeliveryDetailsByUserId/request.vtl"
        response: "delivery/query/getDeliveryDetailsByUserId/response.vtl"

      - dataSource: fd_lambdaresolver_billingHandler
        type: Query
        field: getBillingDetailsByUserId
        request: "billing/query/getBillingDetailsByUserId/request.vtl"
        response: "billing/query/getBillingDetailsByUserId/response.vtl"

      - dataSource: fd_lambdaresolver_billingHandler
        type: Query
        field: getBillingDetailsByOrderId
        request: "billing/query/getBillingDetailsByOrderId/request.vtl"
        response: "billing/query/getBillingDetailsByOrderId/response.vtl"

      - dataSource: fd_lambdaresolver_userHandler
        type: Mutation
        field: createUser
        request: "user/mutation/createUser/request.vtl"
        response: "user/mutation/createUser/response.vtl"

      - dataSource: fd_lambdaresolver_userHandler
        type: Mutation
        field: updateUser
        request: "user/mutation/updateUser/request.vtl"
        response: "user/mutation/updateUser/response.vtl"

      - dataSource: fd_lambdaresolver_userHandler
        type: Mutation
        field: deleteUser
        request: "user/mutation/deleteUser/request.vtl"
        response: "user/mutation/deleteUser/response.vtl"

      - dataSource: fd_lambdaresolver_userHandler
        type: Query
        field: getUser
        request: "user/query/getUser/request.vtl"
        response: "user/query/getUser/response.vtl"

      - dataSource: fd_lambdaresolver_CartHandler
        type: Query
        field: getCartlist
        request: "cart/query/getCartItem/request.vtl"
        response: "cart/query/getCartItem/response.vtl"

      - dataSource: fd_lambdaresolver_userHandler
        type: Query
        field: getUserList
        request: "user/query/getUserList/request.vtl"
        response: "user/query/getUserList/response.vtl"

      - dataSource: fd_lambdaresolver_orderHandler
        type: Query
        field: getOrderListUserId
        request: "order/query/getOrderListUserId/request.vtl"
        response: "order/query/getOrderListUserId/response.vtl"

      - dataSource: fd_lambdaresolver_orderHandler
        type: Query
        field: getOrderListByRestaurantId
        request: "order/query/getOrderListByRestaurantId/request.vtl"
        response: "order/query/getOrderListByRestaurantId/response.vtl"

      - dataSource: fd_lambdaresolver_restaurantHandler
        type: Query
        field: getRestaurantList
        request: "restaurant/query/listRestaurant/request.vtl"
        response: "restaurant/query/listRestaurant/response.vtl"

      - dataSource: fd_lambdaresolver_restaurantHandler
        type: Query
        field: getRestaurantDetailsByIndex
        request: "restaurant/query/getRestaurantDetailsByIndex/request.vtl"
        response: "restaurant/query/getRestaurantDetailsByIndex/response.vtl"

      - dataSource: fd_lambdaresolver_restaurantHandler
        type: Mutation
        field: updateRestaurantRating
        request: "restaurant/mutation/updateRestaurantRating/request.vtl"
        response: "restaurant/mutation/updateRestaurantRating/response.vtl"

      - dataSource: fd_lambdaresolver_restaurantHandler
        type: Mutation
        field: deleteMenuItem
        request: "restaurant/mutation/deleteMenuItem/request.vtl"
        response: "restaurant/mutation/deleteMenuItem/response.vtl"

      - dataSource: fd_lambdaresolver_restaurantHandler
        type: Query
        field: getRestaurantById
        request: "restaurant/query/getRestaurant/request.vtl"
        response: "restaurant/query/getRestaurant/response.vtl"

      - dataSource: fd_lambdaresolver_restaurantHandler
        type: Mutation
        field: updateMenuItem
        request: "restaurant/mutation/updateMenuItem/request.vtl"
        response: "restaurant/mutation/updateMenuItem/response.vtl"

      - dataSource: fd_lambdaresolver_restaurantHandler
        type: Mutation
        field: updateRestaurant
        request: "restaurant/mutation/updateRestaurant/request.vtl"
        response: "restaurant/mutation/updateRestaurant/response.vtl"

      - dataSource: fd_lambdaresolver_restaurantHandler
        type: Mutation
        field: deleteRestaurant
        request: "restaurant/mutation/deleteRestaurant/request.vtl"
        response: "restaurant/mutation/deleteRestaurant/response.vtl"

      - dataSource: fd_lambdaresolver_CartHandler
        type: Mutation
        field: addItemToCart
        request: "cart/mutation/createCartItem/request.vtl"
        response: "cart/mutation/createCartItem/response.vtl"

      - dataSource: fd_lambdaresolver_userHandler
        type: Mutation
        field: userLogin
        request: "user/mutation/loginUser/request.vtl"
        response: "user/mutation/loginUser/response.vtl"

      - dataSource: fd_lambdaresolver_orderHandler
        type: Query
        field: listOrderById
        request: "order/query/listOrderById/request.vtl"
        response: "order/query/listOrderById/response.vtl"

      - dataSource: fd_lambdaresolver_CartHandler
        type: Mutation
        field: deleteCartItem
        request: "cart/mutation/deleteCartItem/request.vtl"
        response: "cart/mutation/deleteCartItem/response.vtl"

      - dataSource: fd_lambdaresolver_CartHandler
        type: Mutation
        field: updateCartItem
        request: "cart/mutation/updateCartItem/request.vtl"
        response: "cart/mutation/updateCartItem/response.vtl"

      - dataSource: fd_lambdaresolver_orderHandler
        type: Mutation
        field: updateOrder
        request: "order/mutation/updateOrder/request.vtl"
        response: "order/mutation/updateOrder/response.vtl"

      - dataSource: fd_lambdaresolver_orderHandler
        type: Query
        field: getDeliveryDetailsByDeliveryBoyId
        request: "order/query/getDeliverylistByBoyId/request.vtl"
        response: "order/query/getDeliverylistByBoyId/response.vtl"

      - dataSource: fd_lambdaresolver_userHandler
        type: Query
        field: listDeliveryBoy
        request: "user/query/listByUserType/request.vtl"
        response: "user/query/listByUserType/response.vtl"

      - dataSource: fd_lambdaresolver_deliveryHandler
        type: Mutation
        field: updateDeliveryDetails
        request: "delivery/mutation/updateDelivery/request.vtl"
        response: "delivery/mutation/updateDelivery/response.vtl"

      - dataSource: fd_lambdaresolver_orderHandler
        type: Mutation
        field: createOrder
        request: "order/mutation/createOrder/request.vtl"
        response: "order/mutation/createOrder/response.vtl"

      - dataSource: fd_lambdaresolver_billingHandler
        type: Query
        field: getBillingDetailsByUserId
        request: "billing/query/getBillingDetailsByUserId/request.vtl"
        response: "billing/query/getBillingDetailsByUserId/response.vtl"

      - dataSource: fd_lambdaresolver_billingHandler
        type: Query
        field: getBillingDetailsByOrderId
        request: "billing/query/getBillingDetailsByOrderId/request.vtl"
        response: "billing/query/getBillingDetailsByOrderId/response.vtl"

      - dataSource: fd_lambdaresolver_restaurantHandler
        type: Mutation
        field: createMenuItemByExcelFile
        request: "restaurant/mutation/createMenuItemByExcelFile/request.vtl"
        response: "restaurant/mutation/createMenuItemByExcelFile/response.vtl"

    schema: "schema/schema.graphql"
    serviceRole: "AppSyncDataSourceServiceRole"
    dataSources:
      - type: AWS_LAMBDA
        name: fd_lambdaresolver_restaurantHandler
        config:
          lambdaFunctionArn:
            { Fn::GetAtt: [RestaurantResolverLambdaFunction, Arn] }
          serviceRoleArn: { Fn::GetAtt: [AppSyncDataSourceServiceRole, Arn] }

      - type: AWS_LAMBDA
        name: fd_lambdaresolver_CartHandler
        config:
          lambdaFunctionArn: { Fn::GetAtt: [CartResolverLambdaFunction, Arn] }
          serviceRoleArn: { Fn::GetAtt: [AppSyncDataSourceServiceRole, Arn] }

      - type: AWS_LAMBDA
        name: fd_lambdaresolver_userHandler
        config:
          lambdaFunctionArn: { Fn::GetAtt: [UserResolverLambdaFunction, Arn] }
          serviceRoleArn: { Fn::GetAtt: [AppSyncDataSourceServiceRole, Arn] }

      - type: AWS_LAMBDA
        name: fd_lambdaresolver_orderHandler
        config:
          lambdaFunctionArn: { Fn::GetAtt: [OrderResolverLambdaFunction, Arn] }
          serviceRoleArn: { Fn::GetAtt: [AppSyncDataSourceServiceRole, Arn] }

      - type: AWS_LAMBDA
        name: fd_lambdaresolver_billingHandler
        config:
          lambdaFunctionArn:
            { Fn::GetAtt: [BillingResolverLambdaFunction, Arn] }
          serviceRoleArn: { Fn::GetAtt: [AppSyncDataSourceServiceRole, Arn] }

      - type: AWS_LAMBDA
        name: fd_lambdaresolver_deliveryHandler
        config:
          lambdaFunctionArn:
            { Fn::GetAtt: [DeliveryResolverLambdaFunction, Arn] }
          serviceRoleArn: { Fn::GetAtt: [AppSyncDataSourceServiceRole, Arn] }

resources:
  Resources:
    lambdaExecutionRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: fd-Lambda-role-${opt:region}-${opt:stage}
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: fd-Lambda-policy-${opt:region}-${opt:stage}
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - s3:*
                  Resource: "*"
                - Effect: Allow
                  Action:
                    - lambda:InvokeFunction
                  Resource:
                    - "*"
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                    - logs:DescribeLogStreams
                  Resource:
                    - "Fn::Join":
                        - ":"
                        - - "arn:aws:logs"
                          - Ref: "AWS::Region"
                          - Ref: "AWS::AccountId"
                          - "log-group:*"
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - "Fn::Join":
                        - ":"
                        - - "arn:aws:logs"
                          - Ref: "AWS::Region"
                          - Ref: "AWS::AccountId"
                          - "log-group:/aws/lambda/*:*:*"
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - "Fn::Join":
                        - ":"
                        - - "arn:aws:logs"
                          - "us-east-1"
                          - Ref: "AWS::AccountId"
                          - "log-group:/aws/lambda/*:*:*"
                - Effect: Allow
                  Action:
                    - ec2:CreateNetworkInterface
                    - ec2:DescribeNetworkInterfaces
                    - ec2:DetachNetworkInterface
                    - ec2:DeleteNetworkInterface
                  Resource: "*"
                - Effect: Allow
                  Action:
                    - dynamodb:GetItem
                    - dynamodb:PutItem
                    - dynamodb:UpdateItem
                    - dynamodb:DeleteItem
                    - dynamodb:BatchGetItem
                    - dynamodb:Query
                    - dynamodb:Scan
                    - dynamodb:BatchWriteItem
                  Resource:
                    - "Fn::Join":
                        - ":"
                        - - "arn:aws:dynamodb"
                          - Ref: "AWS::Region"
                          - Ref: "AWS::AccountId"
                          - "table/fd*"
                    - "Fn::Join":
                        - ":"
                        - - "arn:aws:dynamodb"
                          - Ref: "AWS::Region"
                          - Ref: "AWS::AccountId"
                          - "table/test*"
                - Effect: Allow
                  Action:
                    - dynamodb:DescribeStream
                    - dynamodb:GetShardIterator
                    - dynamodb:ListStreams
                    - dynamodb:GetRecords
                  Resource:
                    - "arn:aws:dynamodb:us-east-1:*:table/fd*"
                - Effect: Allow
                  Action:
                    - s3:GetObject
                  Resource:
                    - "arn:aws:s3:::food-delivery-app-bucket/*"
                    - "arn:aws:s3:::food-delivery-app-bucket*"
                - Effect: Allow
                  Action:
                    - kinesis:*
                  Resource:
                    - "arn:aws:kinesis:us-east-1:706227643616:stream/*"
                - Effect: Allow
                  Action:
                    - firehose:*
                  Resource:
                    - "*"
                - Effect: Allow
                  Action:
                    - es:ESHttp*
                  Resource:
                    - "Fn::Join":
                        - ":"
                        - - "arn:aws:es"
                          - Ref: "AWS::Region"
                          - Ref: "AWS::AccountId"
                          - "domain/*"
                - Effect: Allow
                  Action:
                    - xray:PutTraceSegments
                    - xray:PutTelemetryRecords
                  Resource:
                    - "*"
                - Effect: Allow
                  Action:
                    - states:StartExecution
                    - states:ListStateMachines
                    - states:StopExecution
                    - states:SendTaskSuccess
                    - states:SendTaskFailure
                    - states:SendTaskHeartbeat
                  Resource:
                    # - 'arn:aws:states:eu-west-1:214006439839:stateMachine:cg-cm*'
                    - "Fn::Join":
                        - ":"
                        - - "arn:aws:states"
                          - Ref: "AWS::Region"
                          - Ref: "AWS::AccountId"
                          - "stateMachine:fd*"

    # AppSync lambda role
    AppSyncDataSourceServiceRole:
      Type: "AWS::IAM::Role"
      Properties:
        RoleName: fd-as-dataSource-role-${opt:region}-${opt:stage}
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Service:
                  - "appsync.amazonaws.com"
              Action:
                - "sts:AssumeRole"
        Policies:
          - PolicyName: fd-as-dataSource-policy-${opt:region}-${opt:stage}
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action:
                    - "lambda:invokeFunction"
                  Resource:
                    - "Fn::Join":
                        - ":"
                        - - "arn:aws:lambda"
                          - Ref: "AWS::Region"
                          - Ref: "AWS::AccountId"
                          - "function:fd-resolver-*"
                - Effect: Allow
                  Action:
                    - dynamodb:GetItem
                    - dynamodb:PutItem
                    - dynamodb:UpdateItem
                    - dynamodb:DeleteItem
                    - dynamodb:BatchGetItem
                    - dynamodb:Query
                    - dynamodb:Scan
                    - dynamodb:BatchWriteItem
                    - dynamodb:GetRecords
                  Resource:
                    - "Fn::Join":
                        - ":"
                        - - "arn:aws:dynamodb"
                          - Ref: "AWS::Region"
                          - Ref: "AWS::AccountId"
                          - "table/fd*"
